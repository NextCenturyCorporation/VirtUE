package com.ncc.savior.virtueadmin.service;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ncc.savior.virtueadmin.data.jpa.IPermissionDao;
import com.ncc.savior.virtueadmin.model.ClipboardPermission;
import com.ncc.savior.virtueadmin.model.ClipboardPermissionOption;

/**
 * Service to create, retrieve, and handle permissions for services like the
 * clipboard data guard.
 * 
 * This service has the concept of a computed permission. A computed permission
 * is generated by first looking for the exact match in the database. If no
 * match is found, then return the source default permission. If the source does
 * not have a default permission, return the system default permission.
 *
 */
public class PermissionService {
	@SuppressWarnings("unused")
	private static final Logger logger = LoggerFactory.getLogger(PermissionService.class);
	private IPermissionDao permissionDao;
	private ClipboardPermissionOption defaultClipboardPermission;

	public PermissionService(IPermissionDao permissionDao) {
		this.permissionDao = permissionDao;
		this.defaultClipboardPermission = ClipboardPermissionOption.DENY;
	}

	/**
	 * Returns the clipboard permission for a given source and destination. If none
	 * was set, it will first check the default for the source. IF none was found,
	 * it will use the default set by the service.
	 * 
	 * @param sourceId
	 * @param destinationId
	 * @return
	 */
	public ClipboardPermission getClipboardPermission(String sourceId, String destinationId) {
		ClipboardPermission permission = permissionDao.getClipboardPermission(sourceId, destinationId);
		if (permission == null && !ClipboardPermission.DEFAULT_DESTINATION.equals(destinationId)) {
			// TODO should this be at a higher level? Probalby
			// if we get nothing and weren't already looking for the default, get the
			// default;
			permission = permissionDao.getClipboardPermission(sourceId, ClipboardPermission.DEFAULT_DESTINATION);
		}
		if (permission == null) {
			return new ClipboardPermission(sourceId, destinationId, defaultClipboardPermission);
		}
		return permission;
	}

	/**
	 * Return all permissions in the database for a given source. This does not take
	 * into account the source defaults or the system defaults.
	 * 
	 * @param sourceId
	 * @return
	 */
	public List<ClipboardPermission> getRawClipboardPermissionForSource(String sourceId) {
		return permissionDao.getClipboardPermissionForSource(sourceId);
	}

	/**
	 * Sets the clipboard permission option for a given pair of source ID and
	 * destination ID, overwriting if previously existed.
	 * 
	 * @param sourceId
	 * @param destinationId
	 * @param option
	 */
	public void setClipboardPermission(String sourceId, String destinationId, ClipboardPermissionOption option) {
		permissionDao.setClipboardPermission(sourceId, destinationId, option);
	}

	/**
	 * Removes the permission associated with the given source ID and destination ID
	 * From the database.
	 * 
	 * @param sourceId
	 * @param destId
	 */
	public void clearClipboardPermission(String sourceId, String destId) {
		permissionDao.clearPermission(sourceId, destId);
	}

	/**
	 * Returns a list of computed permissions for a given source and list of
	 * destinations. A computed permission is generated by first looking for the
	 * exact match in the database. If no match is found, then return the source
	 * default permission. If the source does not have a default permission, return
	 * the system default permission.
	 * 
	 * @param sourceId
	 * @param destinationIds
	 * @return
	 */
	public List<ClipboardPermission> getClipboardPermissionForSource(String sourceId,
			Collection<String> destinationIds) {
		List<ClipboardPermission> list = new ArrayList<ClipboardPermission>();
		Map<String, ClipboardPermissionOption> rawMap = getRawClipboardPermissionForSourceAsMap(sourceId);
		for (String destinationId : destinationIds) {
			ClipboardPermissionOption permission;
			if (rawMap.containsKey(destinationId)) {
				permission = rawMap.get(destinationId);
			} else {
				permission = getPermissionWithDefaults(destinationId, rawMap);
			}
			ClipboardPermission cp = new ClipboardPermission(sourceId, destinationId, permission);
			list.add(cp);
		}
		return list;
	}

	/**
	 * Returns the permission stored in the database or null if none found. This
	 * method does not replace a null value with any defaults.
	 * 
	 * @param sourceId
	 * @param destinationId
	 * @return
	 */
	public ClipboardPermission getRawClipboardPermission(String sourceId, String destinationId) {
		ClipboardPermission permission = permissionDao.getClipboardPermission(sourceId, destinationId);
		return permission;
	}

	/**
	 * Returns all permissions stored in the database.
	 * 
	 * @return
	 */
	public Iterable<ClipboardPermission> getAllRawPermissions() {
		return permissionDao.getAllClipboardPermissions();
	}

	/**
	 * Returns computed permissions for a collection of source IDs as a map of pair
	 * (sourceID, destinationID) to {@link ClipboardPermissionOption}. The
	 * permissions are determined by combining each source ID with each other to
	 * complete x^2 permutations.
	 * 
	 * @param sourceIds
	 * @return
	 */
	public Map<Pair<String, String>, ClipboardPermissionOption> getAllPermissionsForSourcesAsMap(
			Collection<String> sourceIds) {
		// Map<Pair<String, String>, ClipboardPermissionOption> map = new
		// TreeMap<Pair<String, String>, ClipboardPermissionOption>();
		Map<Pair<String, String>, ClipboardPermissionOption> rawMap = getAllRawPermissionsAsMap();
		for (String sourceId : sourceIds) {
			for (String destinationId : sourceIds) {
				ImmutablePair<String, String> pair = new ImmutablePair<String, String>(sourceId, destinationId);
				if (!rawMap.containsKey(pair)) {
					ClipboardPermissionOption permission = getPermissionWithDefaults(pair, rawMap);
					rawMap.put(pair, permission);
				}
			}
		}
		return rawMap;
	}

	/**
	 * Returns a list of a computed permissions for all the given ids crossed with
	 * each other as source and destination.
	 * 
	 */
	public List<ClipboardPermission> getAllPermissionsForSources(Collection<String> sourceIds) {
		List<ClipboardPermission> list = new ArrayList<ClipboardPermission>();
		Map<Pair<String, String>, ClipboardPermissionOption> rawMap = getAllRawPermissionsAsMap();
		for (String sourceId : sourceIds) {
			for (String destinationId : sourceIds) {
				ImmutablePair<String, String> pair = new ImmutablePair<String, String>(sourceId, destinationId);
				ClipboardPermissionOption permission;
				if (rawMap.containsKey(pair)) {
					permission = rawMap.get(pair);
				} else {
					permission = getPermissionWithDefaults(pair, rawMap);
				}
				ClipboardPermission cp = new ClipboardPermission(sourceId, destinationId, permission);
				list.add(cp);
			}
		}
		return list;
	}

	/**
	 * returns the system default permission for the clipboard. If no permission can
	 * be found and no source default permission can be found, the computed
	 * permission will fall back to this value.
	 * 
	 * @return
	 */
	public ClipboardPermissionOption getDefaultClipboardPermission() {
		return defaultClipboardPermission;
	}

	/**
	 * Sets the value for the system default permission. If no permission can be
	 * found and no source default permission can be found, the computed permission
	 * will fall back to this value.
	 * 
	 * @param defaultClipboardPermission
	 */
	public void setDefaultClipboardPermission(ClipboardPermissionOption defaultClipboardPermission) {
		this.defaultClipboardPermission = defaultClipboardPermission;
	}

	private Map<String, ClipboardPermissionOption> getRawClipboardPermissionForSourceAsMap(String sourceId) {
		List<ClipboardPermission> list = permissionDao.getClipboardPermissionForSource(sourceId);
		Map<String, ClipboardPermissionOption> map = new HashMap<String, ClipboardPermissionOption>();
		for (ClipboardPermission cp : list) {
			map.put(cp.getDestinationGroupId(), cp.getPermission());
		}
		return map;
	}

	private Map<Pair<String, String>, ClipboardPermissionOption> getAllRawPermissionsAsMap() {
		Iterable<ClipboardPermission> raw = getAllRawPermissions();
		Map<Pair<String, String>, ClipboardPermissionOption> map = new TreeMap<Pair<String, String>, ClipboardPermissionOption>();
		for (ClipboardPermission perm : raw) {
			ImmutablePair<String, String> pair = new ImmutablePair<String, String>(perm.getSourceGroupId(),
					perm.getDestinationGroupId());
			map.put(pair, perm.getPermission());
		}
		return map;
	}

	/**
	 * Get a permission first by looking in the map. If that doesn't exist, look for
	 * the source default by changing the destination in the key to the default id
	 * and check the map again. If that doesn't work, then use the default for the
	 * service.
	 * 
	 * @param pair
	 * @param rawMap
	 * @return
	 */
	private ClipboardPermissionOption getPermissionWithDefaults(ImmutablePair<String, String> pair,
			Map<Pair<String, String>, ClipboardPermissionOption> rawMap) {
		ClipboardPermissionOption cpo = rawMap.get(pair);
		if (cpo == null) {
			ImmutablePair<String, String> sourceDefaultPair = new ImmutablePair<String, String>(pair.left,
					ClipboardPermission.DEFAULT_DESTINATION);
			cpo = rawMap.get(sourceDefaultPair);
		}
		if (cpo == null) {
			cpo = defaultClipboardPermission;
		}
		return cpo;
	}

	private ClipboardPermissionOption getPermissionWithDefaults(String key,
			Map<String, ClipboardPermissionOption> rawMap) {
		ClipboardPermissionOption cpo = rawMap.get(key);
		if (cpo == null) {
			key = ClipboardPermission.DEFAULT_DESTINATION;
			cpo = rawMap.get(key);
		}
		if (cpo == null) {
			cpo = defaultClipboardPermission;
		}
		return cpo;
	}

}
