plugins {
	id "net.tribe-seven.swig" version "0.1.1"
}

apply plugin: 'base'
apply plugin: 'eclipse'
apply plugin: 'cpp'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
   
}

// native dependencies
ext.freerdp = [
    headerRoot: '/usr/include/freerdp2',
    libRoot: '/usr/lib'
]

ext.swigInputs = [
    'freerdp.i'
    ]

// swig global names & locations
ext.swigSourceDir = 'src/main/swig'
ext.swigOutputDir = "${buildDir}/swig"
ext.swigModuleName = 'freerdp'
ext.swigPackageName = 'com.nextcentury.savior.freerdp'
ext.swigCppOutputs = ext.swigInputs.collect( { filename ->
     "$project.ext.swigModuleName/${filename.take(filename.lastIndexOf('.'))}_jni.cpp"
                                          })
tasks.addRule("Pattern: swig-<Filename>") { String taskName ->
	if (taskName.startsWith("swig-")) {
		task(taskName, type: SwigTask) {
			String filename = taskName - 'swig-'
			String basename = filename.take(filename.lastIndexOf('.'))
			source new File("$project.ext.swigSourceDir/$filename")
			module project.ext.swigModuleName
			packageName project.ext.swigPackageName
			javaSourcesPath new File("$project.ext.swigOutputDir/$project.ext.swigModuleName")
			includePaths = [new File('/usr/include/freerdp2')]
			wrapperTargetFile new File("$project.ext.swigOutputDir/$project.ext.swigModuleName/${basename}_jni.cpp")
			outputs.file("$project.ext.swigOutputDir/$project.ext.swigModuleName/${project.ext.swigModuleName}.java")
			outputs.file("$project.ext.swigOutputDir/$project.ext.swigModuleName/${project.ext.swigModuleName}JNI.java")
		}
        project.mainDebugSharedLibrary.dependsOn(taskName)
	}
}

model {
    buildTypes {
        debug
        release
    }
    repositories {
        libs(PrebuiltLibraries) {
            freerdp {
                headers.srcDir "${project.ext.freerdp.headerRoot}"
                binaries.withType(SharedLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    def baseDir = "${project.ext.freerdp.libRoot}"
                    if (os.windows) {
                        // Windows uses a .dll file, with a different link file if it exists (not Cygwin or MinGW)
                        sharedLibraryFile = file("${baseDir}/freerdp2.dll")
                        if (file("${baseDir}/freerdp2.lib").exists()) {
                            sharedLibraryLinkFile = file("${baseDir}/freerdp2.lib")
                        }
                    } else if (os.macOsX) {
                        sharedLibraryFile = file("${baseDir}/libfreerdp2.dylib")
                    } else {
                        sharedLibraryFile = file("${baseDir}/libfreerdp2.so")
                    }
                }
            }
        }
    }

    components {
        main(NativeLibrarySpec) {
            sources {
                cpp {
                    println "cpp files: ${project.ext.swigCppOutputs} [${project.ext.swigCppOutputs.class}]"
                    source {
                        srcDir project.ext.swigOutputDir
                        include project.ext.swigCppOutputs[0]
                        include "I don't exist"
                        //project.ext.swigCppOutputs.each( { item -> println $item } )
                        //                        include project.ext.swigCppOutputs
                        //include 'build/swig/freerdp/freerdp_jni.cpp'
                    }
                    lib library: 'freerdp', linkage: 'api'
                }
                binaries.withType(SharedLibraryBinarySpec) {
                    cppCompiler
                }
            }
        }
    }
}
